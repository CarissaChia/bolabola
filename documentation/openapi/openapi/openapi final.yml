openapi: 3.1.0
info:
  version: 1.0.0
  title: BolaBola API
  termsOfService: https://bolabola.smuaws.com/terms/
  contact:
    name: Contact BolaBola Support
    email: support@bolabola.com
    url: http://bolabola.smuaws.com/contact
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  x-logo:
    url: "https://bolabola.com/logo.png"
    altText: BolaBola logo
  description: >
    This is the **BolaBola** API to demonstrate the functionalities of the BolaBola application.

    # Introduction

    The BolaBola API is designed to provide developers with a comprehensive toolset for integrating with our platform, offering access to our core features and functionalities.

    It also demonstrates the use of the OpenAPI specification to document APIs in a clear and concise manner, facilitating easier integration and understanding of the available API endpoints.

    # OpenAPI Specification

    The OpenAPI Specification offers a wide-ranging and language-agnostic interface to RESTful APIs, enabling both humans and computers to discover and understand the capabilities of a service without direct access to the source code or extensive documentation.

    By adhering to the OpenAPI Specification, we aim to provide a seamless and straightforward experience for developers looking to integrate with the BolaBola platform, ensuring that the available services are easily accessible and understandable.
externalDocs:
  description: "Learn more about integrating with the BolaBola API."
  url: "https://bolabola.com/docs/api"
tags:
  - name: Matches
    description: "Operations related to match scheduling and information."
  - name: Tickets
    description: "Ticket purchasing and management operations."
  - name: Users
    description: |
      "User account management and profile operations. This includes utilizing AMQP for asynchronous user-related operations such as account creation, profile updates, and notification delivery. To interact with user accounts via AMQP, clients must declare a queue and bind it to the user exchange. Messages published to this exchange should contain the operation type (e.g., create, update) and the relevant user data in JSON format."
  - name: Billing
    description: "Handle payments and refunds using Stripe integration."
  - name: Seats
    description: "Handle seat reservations and ticket counts."
  - name: Video Asset
    description: "Manages video assets; interacts with AWS DynamoDB to store and retrieve video metadata, including video URLs."
  - name: Live Stats
    description: "Operations related to live match statistics."
  - name: Notification
    description: |
      This endpoint describes how to consume notification messages from a queue using AMQP protocol. To consume notifications, a consumer must connect to the AMQP server, declare a queue, and start consuming messages from it. The consumer should be prepared to handle messages according to the expected format, which typically involves JSON structures for email notifications.

      The process involves the following steps:
      1. Establish a connection to the AMQP server using the appropriate credentials.
      2. Declare the queue from which messages will be consumed. Ensure the queue exists or create it if necessary.
      3. Start consuming messages from the queue. Optionally, set up an auto-acknowledgment mechanism to automatically acknowledge messages upon successful processing.
      4. Implement logic to process each message according to its content and format. This often involves parsing JSON data and performing actions such as sending emails or notifications.
      5. Handle any errors or exceptions that occur during message consumption and processing.

      It is important to manage the connection and consumer lifecycle properly, ensuring that connections are closed and resources are released when consumption is completed or when the application is shut down.

      Example configuration for consuming messages:
      ```
      {
        "queue_name": "notification_queue",
        "auto_ack": true,
        "consumer_tag": "my_consumer"
      }
      ```
x-tagGroups:
  - name: Core Features
    tags:
      - Matches
      - Live Stats
      - Notification
      - Users
      - Billing
      - Seats
      - Video Asset
  - name: Orchestrators
    tags:
      - Match Booking Orchestrator
      - Refund Orchestrator

servers:
  - url: https://{tenant}.bolabola.smuaws.com/api/v1
    variables:
      tenant:
        default: app
        description: Your tenant id
  - url: https://api.bolabola.com/v1
paths:
  # start of documentation

  # USER
  "api/v1/users/ping":
    get:
      tags:
        - Users
      summary: Ping User Service
      description: Sends a ping request to the user service to check its status.
      responses:
        "200":
          description: Service is up and responding.
        "500":
          description: Service is down or not responding.

  "api/v1/users":
    get:
      tags:
        - Users
      summary: Get All Users
      description: Retrieves a list of all users in the system.
      responses:
        "200":
          description: A list of users.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 200
                    data:
                      - id: "auth0|1234"
                        name: "John Doe"
                        email: "johndoe@example.com"
                        tickets: []
                        premium: "no"
                      - id: "auth0|5678"
                        name: "Jane Doe"
                        email: "janedoe@example.com"
                        tickets: []
                        premium: "yes"
        "404":
          description: No users found.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 404
                    message: "No users found"

  "api/v1/users/{id}":
    get:
      tags:
        - Users
      summary: View User Information from ID
      description: Retrieves information for a specific user by their ID.
      parameters:
        - in: path
          name: id
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user information.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 200
                    data:
                      id: "auth0|1234"
                      name: "John Doe"
                      email: "johndoe@example.com"
                      tickets: []
                      premium: "no"
        "404":
          description: User not found.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 404
                    message: "User not found"

  "/api/v1/users/{id}/email":
    get:
      tags:
        - Users
      summary: Get User from Email
      description: Retrieves the email address for a specific user by their ID without using a schema.
      parameters:
        - in: path
          name: id
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user email.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 200
                    email: "johndoe@example.com"
        "404":
          description: User not found.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 404
                    message: "User not found"

  "/api/v1/users/check-create":
    post:
      tags:
        - Users
      summary: Check and Create User
      description: Checks if a user exists, and creates a new user if not. This operation does not use a schema for the request body.
      requestBody:
        required: true
        content:
          application/json:
            examples:
              example-1:
                value:
                  name: "John Doe"
                  email: "johndoe@example.com"
                  user_id: "auth0|1234"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 201
                    message: "User created successfully"
        "400":
          description: User info not provided or User already exists.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 400
                    message: "User info not provided"
                example-2:
                  value:
                    code: 400
                    message: "User already exists"

  "/api/v1/users/{id}/tickets":
    get:
      tags:
        - Users
      summary: View All User Tickets
      description: Retrieves all tickets associated with a user's account.
      parameters:
        - in: path
          name: id
          description: The ID of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved user tickets.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 200
                    tickets:
                      - ticket_id: "ticket123"
                        match_id: "match456"
                        category: "VIP"
                        seat_number: "A10"
                      - ticket_id: "ticket789"
                        match_id: "match101"
                        category: "General"
                        seat_number: "B20"
        "404":
          description: User not found or User has no tickets.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 404
                    message: "User not found"
                example-2:
                  value:
                    code: 404
                    message: "User has no tickets"

  "/api/v1/users/{id}/tickets/match/{match_id}":
    get:
      tags:
        - Users
      summary: View a Specific User Ticket by Match ID
      description: Retrieves details of a specific ticket owned by a user, identified by match ID.
      parameters:
        - in: path
          name: id
          description: The ID of the user.
          required: true
          schema:
            type: string
        - in: path
          name: match_id
          description: The ID of the match.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved the ticket details.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 200
                    data:
                      ticket_id: "ticket123"
                      match_id: "match456"
                      category: "VIP"
                      seat_number: "A10"
        "404":
          description: User not found, User has no tickets, or Ticket not found.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 404
                    message: "User not found"
                example-2:
                  value:
                    code: 404
                    message: "User has no tickets"
                example-3:
                  value:
                    code: 404
                    message: "Ticket not found"

  "/user/{id}/tickets":
    delete:
      tags:
        - Users
      summary: Delete a User's Ticket by Payment Intent
      description: Deletes a specific ticket from a user's list of tickets using the payment intent.
      parameters:
        - in: path
          name: id
          description: The ID of the user.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_intent:
                  type: string
                  description: The payment intent associated with the ticket to be deleted.
      responses:
        "200":
          description: Ticket deleted successfully.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 200
                    message: "Ticket deleted successfully"
        "404":
          description: User not found, User has no tickets, or Ticket not found with the provided payment intent.
          content:
            application/json:
              examples:
                example-1:
                  value:
                    code: 404
                    message: "User not found"
                example-2:
                  value:
                    code: 404
                    message: "User has no tickets"
                example-3:
                  value:
                    code: 404
                    message: "Ticket not found"

  # VIDEO ASSET DOCUMETNATION

  "/api/v1/videoasset/":
    post:
      tags:
        - Video Asset
      summary: Create video asset
      description: Create a new video asset with a given video ID and URL.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the video asset (equivalent to match ID).
                url:
                  type: string
                  description: The URL of the video asset.
              required:
                - id
                - url
      responses:
        "201":
          description: Video asset created successfully.
        "400":
          description: Bad request. Missing video ID or URL.
        "500":
          description: Internal server error. Failed to create video asset.
  "/api/v1/videoasset/video":
    get:
      tags:
        - Video Asset
      summary: Get video asset
      description: Retrieve the URL of a video asset by its video ID (equivalent to match ID).
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: The ID of the video asset to retrieve.
      responses:
        "200":
          description: Video asset retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  video_url:
                    type: string
                    description: The URL of the video asset.
        "400":
          description: Bad request. Missing video ID.
        "404":
          description: Video not found.

  # SEAT DOCUMENTATION
  "/api/v1/seat":
    get:
      tags:
        - Seats
      summary: Get seat information
      description: Retrieves information about available seats for a match.
      parameters:
        - name: matchId
          in: query
          required: true
          description: The unique identifier of the match to retrieve seat information for.
          schema:
            type: string
      responses:
        "200":
          description: Seat information retrieved successfully.
  "/api/v1/seat/availabletickets/{id}":
    get:
      tags:
        - Seats
      summary: Get Available Tickets
      description: Retrieve available tickets for a specific match.
      parameters:
        - in: path
          name: id
          description: The ID of the match.
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        "200":
          description: Successfully retrieved available tickets.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ticket_id:
                      type: string
                    user_id:
                      type: string
                    match_id:
                      type: string
                    category:
                      type: string
                    seat_number:
                      type: string
        "404":
          description: Match not found.
  "/api/v1/seat/reserve":
    post:
      tags:
        - Seats
      summary: Reserve Seats
      description: Reserve seats for a user in a specific match.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                match_id:
                  type: string
                category:
                  type: string
                quantity:
                  type: integer
      responses:
        "200":
          description: Seats successfully reserved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                  ticket_ids:
                    type: array
                    items:
                      type: string
                    description: IDs of reserved tickets.
        "400":
          description: Invalid request payload.
        "409":
          description: One or more seats are currently on hold or have issues.
  "/api/v1/seat/validate_reservation/":
    post:
      tags:
        - Seats
      summary: Validate Reservation
      description: Validate if a seat reservation belongs to a specific user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket_id:
                  type: string
                user_id:
                  type: string
      responses:
        "200":
          description: Validation successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [confirmed, available]
                    description: Status of the reservation.
                  message:
                    type: string
                    description: Confirmation message.
        "404":
          description: Seat not found.
  "/api/v1/seat/tickets/count":
    post:
      tags:
        - Seats
      summary: Get Ticket Count
      description: Get the count of tickets for a specific match, including reserved and available tickets.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: string
      responses:
        "200":
          description: Ticket count successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  match_id:
                    type: string
                    description: ID of the match.
                  reserved_tickets:
                    type: object
                    properties:
                      A:
                        type: integer
                        description: Number of reserved tickets in category A.
                      B:
                        type: integer
                        description: Number of reserved tickets in category B.
                      C:
                        type: integer
                        description: Number of reserved tickets in category C.
                  available_tickets:
                    type: object
                    properties:
                      A:
                        type: integer
                        description: Number of available tickets in category A.
                      B:
                        type: integer
                        description: Number of available tickets in category B.
                      C:
                        type: integer
                        description: Number of available tickets in category C.
                  ticket_ids:
                    type: array
                    items:
                      type: string
                    description: IDs of all tickets for the match.
        "404":
          description: Match not found.

  # LIVE STAT DOCUMENTATION
  "/api/v1/livestats/{matchId}":
    get:
      tags:
        - Live Stats
      summary: Get Live Match Stats
      description: Retrieve live statistics for a specific match.
      parameters:
        - in: path
          name: matchId
          description: The ID of the match for which live stats are being requested.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Live stats retrieved successfully.
        "404":
          description: Match not found.

  # MATCH BOOKING
  "/api/v1/booking/init-match-booking/{matchId}":
    post:
      tags:
        - Match Booking Orchestrator
      summary: Initialize Match Booking
      description: Initiates the booking process for a match by reserving seats and initiating billing.
      parameters:
        - in: path
          name: matchId
          required: true
          schema:
            type: string
          description: The ID of the match for which booking is being initiated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The ID of the user initiating the booking.
                email:
                  type: string
                  description: The email of the user for billing and notifications.
                category:
                  type: string
                  description: The category of tickets being booked.
                quantity:
                  type: integer
                  description: The number of tickets being booked.
      responses:
        "200":
          description: Booking initiated successfully.
        "400":
          description: Bad request, possibly due to missing or invalid parameters.
        "404":
          description: Match not found.
        "500":
          description: Internal server error, could not initiate booking.

  "/api/v1/booking/process-webhook":
    post:
      tags:
        - Match Booking Orchestrator
      summary: Process Webhook
      description: Receives a POST request from the billing service and processes it accordingly.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: The status of the billing process.
                payment_intent:
                  type: string
                  description: The payment intent ID from the billing service.
                metadata:
                  type: object
                  properties:
                    user_id:
                      type: string
                      description: The ID of the user involved in the booking.
                    email:
                      type: string
                      description: The email of the user for billing and notifications.
                    A:
                      type: string
                      description: Number of tickets booked in category A.
                    B:
                      type: string
                      description: Number of tickets booked in category B.
                    C:
                      type: string
                      description: Number of tickets booked in category C.
                    match_id:
                      type: string
                      description: The ID of the match for which booking is processed.
                    ticket_ids:
                      type: string
                      description: The IDs of the tickets involved in the booking.
      responses:
        "200":
          description: Webhook processed successfully.
        "400":
          description: Bad request, possibly due to missing or invalid parameters.
        "500":
          description: Internal server error, could not process webhook.

  "/api/v1/booking/fail-booking":
    post:
      tags:
        - Match Booking Orchestrator
      summary: Fail Booking
      description: Receives a POST request from the billing service indicating a failed booking due to payment not being completed in time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: The status of the booking process, indicating failure reasons such as expired or cancelled.
                metadata:
                  type: object
                  properties:
                    user_id:
                      type: string
                      description: The ID of the user involved in the failed booking.
                    email:
                      type: string
                      description: The email of the user for billing and notifications.
                    match_id:
                      type: string
                      description: The ID of the match for which booking failed.
                    ticket_ids:
                      type: string
                      description: The IDs of the tickets involved in the failed booking.
      responses:
        "200":
          description: Failed booking processed successfully.
        "400":
          description: Bad request, possibly due to missing or invalid parameters.
        "500":
          description: Internal server error, could not process failed booking.

  "/api/v1/booking/":
    get:
      tags:
        - Match Booking Orchestrator
      summary: Health Check
      description: Checks the health status of the Match Booking service.
      responses:
        "200":
          description: Match Booking service is up and running.
        "500":
          description: Match Booking service is down or not responding.

  "/api/v1/availabletickets/{matchId}":
    get:
      tags:
        - Match Booking Orchestrator
      summary: Get Available Tickets by Match ID
      description: Retrieve available tickets for a specific match by its ID.
      parameters:
        - in: path
          name: matchId
          description: The ID of the match.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved available tickets.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ticket_id:
                      type: string
                    user_id:
                      type: string
                    match_id:
                      type: string
                    category:
                      type: string
                    seat_number:
                      type: string
        "404":
          description: Match not found.

  # MATCH STREAMING
  "/api/v1/match-streaming/retrieve/{matchId}":
    get:
      tags:
        - MatchStreaming
      summary: Retrieve Match Details
      description: Retrieve match details using GraphQL with no schema.
      parameters:
        - in: path
          name: matchId
          required: true
          description: The ID of the match to retrieve details for.
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved match details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
                  venue:
                    type: string
                  home_team:
                    type: string
                  away_team:
                    type: string
                  home_score:
                    type: integer
                  away_score:
                    type: integer
                  date:
                    type: string
                    format: date-time
        "404":
          description: Match not found.
        "500":
          description: Error retrieving match details.

  # BILLING

  "/api/v1/billing/public-key":
    get:
      tags:
        - Billing
      summary: Get Stripe public key
      description: Endpoint to retrieve the public key for the frontend integration with Stripe.
      responses:
        200:
          description: Successfully retrieved the public key.
        500:
          description: Internal server error.
  "/api/v1/billing/checkout":
    post:
      tags:
        - Billing
      summary: Create checkout session
      description: |
        Endpoint to create a new checkout session for purchasing tickets. This endpoint expects a JSON payload containing details about the tickets to be purchased, match information, and user details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: string
                  description: The ID of the match.
                match_name:
                  type: string
                  description: The name of the match.
                tickets:
                  type: array
                  items:
                    type: object
                    properties:
                      category:
                        type: string
                        description: The category of the ticket (e.g., A, B, C).
                      quantity:
                        type: integer
                        description: The quantity of tickets to be purchased for this category.
                  description: Details about the tickets to be purchased.
                user_id:
                  type: string
                  description: The ID of the user making the purchase.
                ticket_ids:
                  type: array
                  items:
                    type: string
                  description: List of ticket IDs.
              required:
                - match_id
                - match_name
                - tickets
                - user_id
                - ticket_ids
      responses:
        200:
          description: Checkout session created successfully.
        403:
          description: Error creating the checkout session.
        500:
          description: Internal server error.
  "/api/v1/billing/webhook/stripe":
    post:
      tags:
        - Billing
      summary: Stripe webhook endpoint
      description: Endpoint to handle webhook events from Stripe, such as payment confirmation, cancellation, or expiration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload from the Stripe webhook event.
      responses:
        200:
          description: Payment confirmed and orchestrator notified.
        400:
          description: Invalid payload or signature.
        500:
          description: Failed to notify the orchestrator.
  "/api/v1/billing/refund":
    post:
      tags:
        - Billing
      summary: Refund payment
      description: |
        Endpoint to refund a user's payment. This endpoint expects a JSON payload containing the payment intent ID and other details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_intent:
                  type: string
                  description: The ID of the payment intent to be refunded.
                user_id:
                  type: string
                  description: The ID of the user whose payment is being refunded.
                match_id:
                  type: string
                  description: The ID of the match associated with the payment.
                category:
                  type: string
                  description: The category of the ticket for which the refund is being processed.
                quantity:
                  type: integer
                  description: The quantity of tickets for which the refund is being processed.
                ticket_ids:
                  type: array
                  items:
                    type: string
                  description: List of ticket IDs associated with the payment.
              required:
                - payment_intent
                - user_id
                - match_id
                - category
                - quantity
                - ticket_ids
      responses:
        200:
          description: Refund successful.
        400:
          description: Bad request. Missing required fields or invalid data provided.
        500:
          description: Internal server error. Failed to process the refund.
  "/api/v1/billing/process-webhook":
    post:
      tags:
        - Billing
      summary: Process Webhook from Billing Service
      description: |
        Receive a POST request from the billing service to handle transaction status updates.
        If the status is "complete", publish match and user data to the RabbitMQ queue.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: The status of the transaction (e.g., "complete", "expired", "cancelled").
                payment_intent:
                  type: string
                  description: The ID of the payment intent associated with the transaction.
                metadata:
                  type: object
                  description: Additional metadata about the transaction, including user ID, email, ticket categories, match ID, and ticket IDs.
      responses:
        "200":
          description: Transaction status processed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
        "400":
          description: Bad request. Missing required fields or invalid data provided.
        "500":
          description: Internal server error. Failed to process the transaction status.

  # Refund
  "api/v1/refund/ping":
    get:
      tags:
        - Refund Orchestrator
      summary: Ping refund service
      description: |
        Endpoint to check the status of the refund service.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Pong!"
      responses:
        200:
          description: Refund service is up and running.
        500:
          description: Refund service is down. Please try again later.
  "api/v1/refund/initiate-refund":
    post:
      tags:
        - Refund Orchestrator
      summary: Initiate refund
      description: |
        Initiate refund for a user's ticket purchase.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The ID of the user requesting the refund.
                ticket_ids:
                  type: string
                  description: Comma-separated list of ticket IDs to be refunded.
                match_id:
                  type: string
                  description: The ID of the match associated with the ticket.
                category:
                  type: string
                  description: The category of the ticket for which the refund is being processed.
                quantity:
                  type: integer
                  description: The quantity of tickets for which the refund is being processed.
                payment_intent:
                  type: string
                  description: The ID of the payment intent associated with the transaction.
              required:
                - user_id
                - ticket_id
                - match_id
                - category
                - quantity
                - payment_intent
      responses:
        200:
          description: Refund initiated successfully.
        500:
          description: Internal server error. Failed to initiate refund.

# MATCH
  "/api/v1/match/":
    post:
      tags:
        - Matches
      summary: MATCH API - GRAPHQL
      description: |
        Provides GraphQL query examples for retrieving match overviews and detailed match information. 

        Example query for match overview:
        ```
        {
          matches_overview {
            _id
            name
            home_team
            away_team
            date
          }
        }
        ```

        Example query for detailed match information:
        ```
        {
          match_details(_id: "matchId") {
            _id
            name
            description
            venue
            home_team
            away_team
            home_score
            away_score
            date
          }
        }
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: GraphQL query to fetch matches overview.
                variables:
                  type: object
                  description: Variables for the GraphQL query, if any.
      responses:
        "200":
          description: Successfully retrieved matches overview.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    home_team:
                      type: string
                    away_team:
                      type: string
                    home_score:
                      type: integer
                    away_score:
                      type: integer
                    date:
                      type: string
                      format: date-time
                    seats:
                      type: integer
                    categories:
                      type: array
                      items:
                        type: object
                        properties:
                          category:
                            type: string
                          quantity:
                            type: integer
        "400":
          description: Bad request, possibly due to missing or invalid parameters.
        "500":
          description: Internal server error, could not retrieve matches overview.




components:
  securitySchemes:
    bolabola_auth:
      description: "OAuth2 authentication for accessing BolaBola APIs."
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://bolabola.com/oauth/authorize
          tokenUrl: https://bolabola.com/oauth/token
          scopes:
            "read:matches": View match information
            "write:tickets": Purchase and manage tickets
    api_key:
      description: "API key authentication for accessing BolaBola APIs."
      type: apiKey
      in: header
      name: X-BolaBola-API-Key
